name: Run Appium E2E Tests for swift-sdk PR

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  ui-tests:
    runs-on: macos-latest

    steps:
      - name: Checkout swift-sdk (this repo)
        uses: actions/checkout@v3

      - name: Get PR information
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "PR Branch: ${{ github.head_ref }}"
          echo "PR Commit SHA: ${{ github.event.pull_request.head.sha }}"

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Verify Xcode version
        run: xcodebuild -version

      - name: Checkout examples-hub sample app
        uses: actions/checkout@v3
        with:
          repository: getpara/examples-hub
          token: ${{ secrets.GITHUB_TOKEN }}
          path: examples-hub
          ref: tyson/appium-testing

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: examples-hub/mobile/with-swift/tests/package-lock.json

      - name: Install Appium
        run: |
          npm install -g appium
          appium driver install xcuitest

      - name: Set up iOS Simulator
        run: |
          # Create and boot simulator
          DEVICE_NAME="iPhone 16 Pro"
          RUNTIME="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"
          UDID=$(xcrun simctl create "$DEVICE_NAME" "$DEVICE_NAME")
          echo "Created simulator: $UDID"
          xcrun simctl boot "$UDID"
          echo "SIMULATOR_UDID=$UDID" >> $GITHUB_ENV
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          echo "Booted simulator with UDID: $UDID"
          
          # Wait for simulator to fully boot with more robust checks
          echo "Waiting for simulator to boot completely..."
          MAX_BOOT_ATTEMPTS=20  # Increased from 15 to 20 attempts
          BOOT_CHECK_INTERVAL=15  # 15 seconds between checks
          
          for i in $(seq 1 $MAX_BOOT_ATTEMPTS); do
            echo "Boot check attempt $i of $MAX_BOOT_ATTEMPTS..."
            
            # Check if simulator is booted
            BOOT_STATUS=$(xcrun simctl list | grep "$UDID" | grep -o "Booted" || echo "Not booted")
            
            if [ "$BOOT_STATUS" == "Booted" ]; then
              # Additional check for simulator readiness
              SIM_STATUS=$(xcrun simctl bootstatus "$UDID" 2>&1 || echo "Error")
              
              if [[ "$SIM_STATUS" == *"Booted"* ]]; then
                echo "Simulator is fully booted and ready after attempt $i"
                
                # Verify simulator is responding to commands
                if xcrun simctl list devices | grep "$UDID" | grep -q "Booted"; then
                  echo "Simulator is responding to commands"
                  break
                fi
              fi
            fi
            
            if [ $i -eq $MAX_BOOT_ATTEMPTS ]; then
              echo "Failed to boot simulator after $MAX_BOOT_ATTEMPTS attempts"
              echo "Current simulator status:"
              xcrun simctl list devices
              echo "Simulator boot status:"
              xcrun simctl bootstatus "$UDID" || true
              echo "System log:"
              log show --predicate 'process == "com.apple.CoreSimulator.CoreSimulatorService"' --last 5m | tail -n 50
              exit 1
            fi
            
            echo "Waiting for simulator to boot (attempt $i)..."
            sleep $BOOT_CHECK_INTERVAL
          done
          
          # Additional delay for full initialization
          echo "Giving simulator additional time to initialize..."
          sleep 180  # Increased from 120 to 180 seconds
          
          # Verify simulator is ready for testing
          echo "Verifying simulator readiness..."
          if ! xcrun simctl list devices | grep "$UDID" | grep -q "Booted"; then
            echo "Simulator is not in expected state after initialization"
            xcrun simctl list devices
            exit 1
          fi
          
          # Clean up any existing WDA processes
          echo "Cleaning up existing WDA processes..."
          pkill -f "WebDriverAgent" || true
          rm -rf ~/Library/Developer/Xcode/DerivedData/WebDriverAgent-* || true
          
          # Kill any existing WDA processes on port 8100
          lsof -ti:8100 | xargs kill -9 || true
          
          # Clear derived data for WDA
          rm -rf ~/Library/Developer/Xcode/DerivedData/WebDriverAgent-* || true

      - name: Update swift-sdk branch in project.pbxproj
        if: ${{ github.event_name == 'pull_request' }}
        working-directory: examples-hub/mobile/with-swift
        run: |
          PR_BRANCH="${{ github.head_ref }}"
          echo "Updating swift-sdk branch to $PR_BRANCH in project.pbxproj"
          sed -i '' -E 's|branch = [^;]*|branch = '"$PR_BRANCH"'|' example.xcodeproj/project.pbxproj
          echo "Updated swift-sdk dependency:"
          grep -A 5 'XCRemoteSwiftPackageReference "swift-sdk"' example.xcodeproj/project.pbxproj

      - name: Build and install app
        working-directory: examples-hub/mobile/with-swift
        run: |
          # Install xcpretty if needed
          which xcpretty || gem install xcpretty
          
          # Build with explicit configuration and build directory
          echo "Building Example app..."
          set -e -o pipefail
          xcodebuild -scheme "Example" \
            -destination "id=${{ env.SIMULATOR_UDID }}" \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            build | xcpretty
          
          # Find the app bundle (check both potential locations)
          echo "Searching for app bundle..."
          APP_PATH=""
          
          if [ -d "./DerivedData/Build/Products/Debug-iphonesimulator/Example.app" ]; then
            APP_PATH="./DerivedData/Build/Products/Debug-iphonesimulator/Example.app"
          elif [ -d "./build/Debug-iphonesimulator/Example.app" ]; then
            APP_PATH="./build/Debug-iphonesimulator/Example.app"
          else
            # Search for any .app bundle
            APP_PATH=$(find ./DerivedData -name "*.app" -type d | head -n 1)
            if [ -z "$APP_PATH" ]; then
              echo "Contents of DerivedData directory:"
              find ./DerivedData -type d -maxdepth 5
              echo "Error: Could not find any .app bundle in build directories"
              exit 1
            fi
          fi
          
          echo "Found app bundle at: $APP_PATH"
          ls -l "$APP_PATH"  # Check contents of the app bundle
          xcrun simctl install booted "$APP_PATH"
          echo "Installed app. Listing installed apps:"
          xcrun simctl listapps booted | grep -i "com.usecapsule.example.swift" || { echo "Error: App not found in simulator"; exit 1; }
          xcrun simctl launch booted com.usecapsule.example.swift || echo "Warning: App failed to launch manually"

      - name: Install test dependencies
        working-directory: examples-hub/mobile/with-swift/tests
        run: npm install
        
      - name: Start Appium server
        run: |
          # Start Appium on a specific port
          export APPIUM_PORT=4723
          echo "Starting Appium server on port $APPIUM_PORT..."
          appium --port $APPIUM_PORT --log appium.log --debug &
          APPIUM_PID=$!
          
          # Give Appium time to initialize first
          echo "Waiting for Appium server to initialize..."
          sleep 30  # Increased from 15 to 30 seconds
          
          # More robust verification that checks both server response code and content
          echo "Verifying Appium server is ready..."
          MAX_RETRIES=10  # Increased from 5 to 10
          RETRY_DELAY=10  # Increased from 5 to 10 seconds
          for i in $(seq 1 $MAX_RETRIES); do
            HTTP_CODE=$(curl -s -o /tmp/appium_response -w "%{http_code}" http://localhost:$APPIUM_PORT/status || echo "Failed")
            if [[ "$HTTP_CODE" == "200" ]]; then
              echo "Appium server responded with HTTP 200 on attempt $i!"
              cat /tmp/appium_response
              echo "Appium server is ready!"
              break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Appium server failed to start properly after $MAX_RETRIES attempts"
              echo "Appium logs:"
              cat appium.log
              echo "Process status:"
              ps aux | grep appium
              echo "Port status:"
              lsof -i :$APPIUM_PORT || echo "No process using port $APPIUM_PORT"
              exit 1
            fi
            
            echo "Attempt $i: Waiting for Appium server... (will retry in $RETRY_DELAY seconds)"
            sleep $RETRY_DELAY
          done
          
          echo "APPIUM_PORT=$APPIUM_PORT" >> $GITHUB_ENV
          echo "APPIUM_PID=$APPIUM_PID" >> $GITHUB_ENV

      - name: Run UI Tests
        working-directory: examples-hub/mobile/with-swift/tests
        env:
          PARA_API_KEY: ${{ secrets.PARA_API_KEY }}
          PARA_ENVIRONMENT: ${{ secrets.PARA_ENVIRONMENT }}
          SIMULATOR_UDID: ${{ env.SIMULATOR_UDID }}
          APPIUM_PORT: ${{ env.APPIUM_PORT }}
          _FORCE_LOGS: 1
        run: |
          if [ -z "$PARA_API_KEY" ] || [ -z "$PARA_ENVIRONMENT" ] || [ -z "$SIMULATOR_UDID" ]; then
            echo "Error: Missing required environment variables"; exit 1
          fi
          echo "Simulator status:"
          xcrun simctl bootstatus $SIMULATOR_UDID
          xcrun simctl list | grep "$SIMULATOR_UDID"
          echo "Appium status:"
          curl -s http://localhost:$APPIUM_PORT/status | cat
          npm test -- --testTimeout=900000 --forceExit --detectOpenHandles --runInBand  # Increased from 60000 to 900000

      - name: Upload Appium logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: appium-logs
          path: appium.log

      - name: Clean up Appium server
        if: ${{ always() }}
        run: |
          if [ ! -z "${{ env.APPIUM_PID }}" ]; then
            echo "Stopping Appium server (PID: ${{ env.APPIUM_PID }})..."
            kill ${{ env.APPIUM_PID }} || true
          fi

      - name: Clean up simulator
        if: ${{ always() }}
        run: |
          echo "Cleaning up simulator with UDID: ${{ env.SIMULATOR_UDID }}"
          xcrun simctl shutdown "${{ env.SIMULATOR_UDID }}" || true
          xcrun simctl delete "${{ env.SIMULATOR_UDID }}" || true
